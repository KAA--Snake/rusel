<?php
/**
 * Created by PhpStorm.
 * User: sergey
 * Date: 20.05.2017
 * Time: 13:42
 */

namespace common\modules\catalog\modules\admin\models\import;

set_time_limit(0);
$start_time = microtime(true);

use common\modules\catalog\models\catalog_import\Import_log;
use common\modules\catalog\models\mongo\Product;
use common\modules\catalog\models\Section;
use yii\base\Model;


class CatalogImport extends Model
{

    public $enableCsrfValidation = false;

    var $file;
    var $filePath;

    var $isNeedDropCollection; //свитчер- надо ли сбрасывать коллекцию перед импортом

    public function rules()
    {
        $catalogModule = \Yii::$app->getModule('catalog');
        $allowedExtensions = $catalogModule->params['allowedExtensions'];

        return [
            [['file'],
                'file',
                //'skipOnEmpty' => false,
                'checkExtensionByMimeType' => false, //bug #6148
                'extensions' => $allowedExtensions,
                'maxFiles' => 1],
            [
                ['isNeedDropCollection'], 'boolean'
            ]
        ];
    }


    public function attributeLabels()
    {

        return [
            'file' => 'Файл для обработки',
            'isNeedDropCollection' => 'Удалить товары перед обработкой',
        ];

        //return parent::attributeLabels(); // TODO: Change the autogenerated stub
    }


    public function upload()
    {

        $catalogModule = \Yii::$app->getModule('catalog');
        $folder =  '/'.$catalogModule->params['importFolderName'].'/';

        if ($this->validate()) {
            $this->filePath = __DIR__.$folder . $this->file->baseName . '.' . $this->file->extension;
            $this->file->saveAs($this->filePath);
            return true;
        } else {
            return false;
        }
    }

    /*public function massUpload()
    {

        $catalogModule = \Yii::$app->getModule('Catalog');
        $catalogModule->params['csvFolderName'];

        if ($this->validate()) {

            foreach ($this->csvFile as $file) {
                $file->saveAs(__DIR__.'/upload_csv/' . $file->baseName . '.' . $file->extension);
            }
            return true;
        } else {
            return false;
        }
    }*/


    /**
     * Сам импорт
     *
     * распознавание что именно импортируется, происходит в парсере далее
     */
    public function import(){

        $files = array($this->filePath);

        foreach($files as $file) {
            $reader = new CatalogXmlReader($file);
            $reader->parse();

            unset($reader);
        }




    }


    /**
     * Генерирует УРЛы для ВСЕХ разделов и элементов каталога,
     * используется после того как был сделан импорт.
     *
     * Также возможно использование без импорта (для перегенерации, если надо)
     *
     * @return bool
     */
    public function generateCatalogUrls(){
        //взять объект Section и сгенерить для него УРЛЫ
        $sectionModel = new Section();
        $sectionModel->generateUrls(); //генерация урлов для разделов
        $sectionModel->generateTree(); //перестроение данных в таблице для создания дерева

        //взять объект Product и сгенерить для него УРЛЫ
        //$productModel = new Product();
        //$productModel->generateUrls();



        return true;
    }


    /**
     * Отправляет запрос на ерп сервер по окончанию обработки выгрузки
     */
    public function sendRespondToErp($fileName, $result){

        $erpParams = \Yii::$app->getModule('catalog')->params['erp'];
        $url =$erpParams['server']."/exchange?type=site_answer&answer=".$fileName;

        $ch = curl_init( $url );
        # Setup request to send json via POST.

        file_put_contents('result.res', json_encode($result));

        $payload = array(
            'type' => 'site_answer',
            'answer' => $fileName,
            'file' => '@result.res',
        ) ;

        //$payload = http_build_query($payload);

        curl_setopt( $ch, CURLOPT_POSTFIELDS, $payload );
        //curl_setopt( $ch, CURLOPT_HTTPHEADER, array('Content-Type:application/json'));
        curl_setopt( $ch, CURLOPT_RETURNTRANSFER, true );
        //curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');
        curl_setopt($ch, CURLOPT_POST, 1);
        //curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');
        //curl_setopt($ch, CURLOPT_USERPWD, Elastic::$user . ":" . Elastic::$pass);
        curl_setopt($ch,CURLOPT_SSL_VERIFYPEER, false);
        curl_setopt($ch,CURLOPT_SSL_VERIFYHOST, false);
        curl_setopt($ch, CURLOPT_PROTOCOLS, CURLPROTO_HTTPS);
        //curl_setopt ($ch, CURLOPT_HTTPHEADER, array('Expect:'));

        $result = curl_exec($ch);
        file_put_contents('test_result', print_r($result, true));
        //file_put_contents('test_payload', print_r($payload, true));

        curl_close($ch);

    }


    /**
     * Отправляет запрос на ерп сервер данные по созданному заказу
     * отправка готова, @TODO осталось написать остальной функционал
     */
    public function sendOrderToErp($fileName, $result){

        $erpParams = \Yii::$app->getModule('catalog')->params['erp'];
        $url =$erpParams['server']."/exchange?type=client_query&query=".$fileName;

        $ch = curl_init( $url );
        # Setup request to send json via POST.

        file_put_contents('result.res', json_encode($result));

        $payload = array(
            'type' => 'client_query',
            'query' => $fileName,
            'file' => '@result.res',
        ) ;

        //$payload = http_build_query($payload);

        curl_setopt( $ch, CURLOPT_POSTFIELDS, $payload );
        //curl_setopt( $ch, CURLOPT_HTTPHEADER, array('Content-Type:application/json'));
        curl_setopt( $ch, CURLOPT_RETURNTRANSFER, true );
        //curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');
        curl_setopt($ch, CURLOPT_POST, 1);
        //curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');
        //curl_setopt($ch, CURLOPT_USERPWD, Elastic::$user . ":" . Elastic::$pass);
        curl_setopt($ch,CURLOPT_SSL_VERIFYPEER, false);
        curl_setopt($ch,CURLOPT_SSL_VERIFYHOST, false);
        curl_setopt($ch, CURLOPT_PROTOCOLS, CURLPROTO_HTTPS);
        //curl_setopt ($ch, CURLOPT_HTTPHEADER, array('Expect:'));

        $result = curl_exec($ch);
        file_put_contents('test_result', print_r($result, true));
        //file_put_contents('test_payload', print_r($payload, true));

        curl_close($ch);

    }


}