<?php
/**
 * Created by PhpStorm.
 * User: Serg S
 * Date: 09.11.19
 * Time: 14:38
 */

namespace common\modules\catalog\models\seo;

use yii\base\Model;
use yii\db\ActiveRecord;
use yii\web\UploadedFile;


class SeoManufacturer extends ActiveRecord
{
    var $file;

    public static function tableName()
    {
        return 'public.seo_manufacturers';
    }

    public function rules()
    {
        return [
            [['text', 'name'],'string'],

            [
                [
                    'big_img_src',
                    'small_img_src',
                    'text',
                    'name'
                ],
                'string'
            ],
            [['id','manufacturer_id', 'sort'], 'integer'],
        ];
    }

    public function beforeDelete()
    {
        try {
            $docRoot = $_SERVER['DOCUMENT_ROOT'];

            if (!empty($this->getAttribute('big_img_src'))) {
                unlink($docRoot.$this->getAttribute('big_img_src'));
            }
            if (!empty($this->getAttribute('small_img_src'))) {
                unlink($docRoot.$this->getAttribute('small_img_src'));
            }
        } catch (\Exception $e) {}

        return parent::beforeDelete(); // TODO: Change the autogenerated stub
    }

    public function beforeSave($insert)
    {
        if (!parent::beforeSave($insert)) {
            return false;
        }

        /**
         *  @TODO Здесь надо генерить миникартинку
         * пока что миникартинка = большой картинке
         *
         */
        $this->small_img_src = $this->big_img_src;

        if(!empty($this->text)) {
            $this->text = htmlentities($this->text);
        }
        return true;
    }


    public function __get($name) {
        switch ($name ) {
            case 'text':
                return html_entity_decode($this->getAttribute('text'));
                break;
        }

        return parent::__get($name);
    }


    public function saveMe(){
        $model = $this;

        //\Yii::$app->pr->print_r2($model->getAttributes());
        //die();
        $attributes = [
            'text' => $model->text,
            'name' => $model->name,
            'manufacturer_id' => $model->manufacturer_id,
        ];

        $model->file = UploadedFile::getInstance($model, 'file');

        if(!empty($model->file)){

            $savedImgResult = $model->upload();

            if ($savedImgResult) {
                //\Yii::$app->pr->print_r2($model->getAttributes());
                $attributes['big_img_src'] = $savedImgResult['big_img_src'];
                $attributes['big_img_width'] = $savedImgResult[0];
                $attributes['big_img_height'] = $savedImgResult[1];
            }

        }

        //если обновляем запись, то подменяем текущую модель той которую обновляем
        if(isset($model->id) && $model->id > 0 && !empty($model->id)){
            $model = self::findOne($model->id);
        }else if(isset($model->manufacturer_id) && $model->manufacturer_id > 0 && !empty($model->manufacturer_id)){
            $searchForUpsert = self::findOne(['manufacturer_id' => $model->manufacturer_id]);

            if (!empty($searchForUpsert)) {
                $model = $searchForUpsert;
            } else {
                //SiC bug null != empty...
                unset($model->id);
            }
        } else {
            //SiC bug null != empty...
            unset($model->id);
        }

        //\Yii::$app->pr->print_r2($model->getAttributes());
        //die();
        $model->setAttributes($attributes);

        try {
            $model->save();
        } catch (\Exception $e) {
            $model->addError($model->id, $e->getMessage());
        }

        return $model;

    }


    public function upload()
    {

        $folder =  $_SERVER['DOCUMENT_ROOT'].'/upload/artikles/'; //$_SERVER['DOCUMENT_ROOT'] = /webapp

        if ($this->validate()) {
            $filePath = $folder . $this->file->baseName . '.' . $this->file->extension;

            $this->file->saveAs($filePath);

            $imgResult = getimagesize($filePath);
            $imgResult['big_img_src'] = '/upload/artikles/'. $this->file->baseName . '.' . $this->file->extension;


            return $imgResult;
        } else {
            return false;
        }
    }

    /**
     * @param $manufacturerId
     */
    public static function getTextByManufacturerId($manufacturerId) {
        if (!empty($manufacturerId)) {
            $foundOne = parent::findOne(['manufacturer_id' => $manufacturerId]);
        }

        if ($foundOne) {
            return $foundOne->text;
        }

        return '';
    }
}